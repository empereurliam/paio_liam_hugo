#!env python3
"""
HackaGame player interface 
"""
import sys, os
sys.path.insert(1, os.path.join(sys.path[0], '..'))

import hackapy.player as pl

def main():
    host, port= pl.serverFromCmd()
    print( f"let\'s go, seat on {host}:{port}." )
    player= TTTPlayerIHM()
    player.takeASeat( host, port )

class TTTPlayerIHM(pl.Player) :
    # PLayer interface :
    def wakeUp(self, playerId, numberOfPlayers, gameConfigurationMsg):
        game, mode= tuple(gameConfigurationMsg[0].split(" "))
        print( f'---\nwake-up player-{playerId} ({numberOfPlayers} players)')
        print( game + ' ' + mode )
        assert( game == 'TicTacToe' and mode in ['Standard', 'Ultimate'] )
        self.mode= mode
        # Get Standard or Ultimate config:
        abss= ["A", "B", "C"]
        ordss= range(4)
        if mode == "Ultimate" :
            abss= ["A", "B", "C", "D", "E", "F", "G", "H", "I"]
            ordss= range(10)
        # Initialize the grid
        self.grid= {
            line: [0 for i in ordss ]
            for line in abss
        }
        self.end= 0
        self.sign= [ ' ', 'x', 'o' ]
        self.id= playerId

    def info(self, line):
        position, value= tuple( line.split(": ") )
        abs, ord= tuple( position.split("-") )
        return abs, int(ord), int(value)
    
    def perceive(self, gameStateMsg):
        os.system("clear")
        # Update the grid:
        if self.mode == "Ultimate" :
            targetMsg= gameStateMsg.pop(-1)
            print( '>' + targetMsg )
            targetMsg= targetMsg.split(": ")[1]
            self.targets= [ int(x) for x in targetMsg.split(' ') ]
        # Update the grid:
        for line in gameStateMsg :
            abs, ord, value= self.info( line )
            self.grid[abs][ord]= value
        # print the grid:
        print( f"player: {self.sign[self.id]}" )
        self.printTTT()
    
    def printTTT(self) :
        abss= self.grid.keys()
        ords= range(1, len(abss)+1)
        s= '  '
        for abs in abss :
            if abs in ['D', 'G']:
                s+= '  '
            s+= ' '+ abs
        print(s)

        for ord in ords :
            if ord in [4, 7] :
                print( "  -------|-------|-------" )
            s= str(ord) +' '
            for abs in abss :
                if abs in ['D', 'G']:
                    s+= ' |'
                s+= ' '+ self.sign[ self.grid[abs][ord] ]
            print(s)
        if self.mode == "Ultimate" :
            print( f"target: {self.targets}" )
    
    def decide(self):
        action = input('Enter your action: ')
        return action
    
    def sleep(self, result):
        print( f'---\ngame end\nresult: {result}')

# script
if __name__ == '__main__' :
    main()